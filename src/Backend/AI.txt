from flask import Flask, render_template, jsonify
from flask import send_from_directory
from flask_cors import CORS
import csv
import os

#BASE_DIR = os.path.abspath(os.path.dirname(__file__))  # /home/dishita/Final/edhithaGCS-main-UI/src/Backend
#STATIC_DIR = os.path.join(BASE_DIR, '/home/dishita/Final/edhithaGCS-main-UI/static/images')
#TEMPLATE_DIR = os.path.join(BASE_DIR, '../../templates')
#CSV_PATH = os.path.join(BASE_DIR, '../../data/all_data.csv')
#IMAGE_DIR = os.path.join(STATIC_DIR, 'images')

AI_BASE = "/home/dishita/Desktop/SHITTT!!!/AI"

CSV_PATH = os.path.join(AI_BASE, "results.csv")
IMAGE_DIR = os.path.join(AI_BASE, "crops_dir")

#app = Flask(__name__, static_folder=STATIC_DIR, template_folder=TEMPLATE_DIR)
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
app = Flask(__name__, template_folder=BASE_DIR)
CORS(app)


# Pre-load CSV
csv_data = {}

def load_csv():
    global csv_data
    with open(CSV_PATH, newline='') as f:
        reader = csv.DictReader(f)
        for row in reader:
            crop_name = row['crop_name']
            csv_data[crop_name] = row

@app.route('/all-images', methods=['GET'])
def all_images():
    images = [f for f in os.listdir(IMAGE_DIR) if os.path.isfile(os.path.join(IMAGE_DIR, f))]
    return jsonify({'imageUrls': images})

#This gives fresh info from the img-dir of jetson
@app.route('/get_image_info/<image_name>')
def get_fresh_info(image_name):
    with open(CSV_PATH, newline='') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if row['crop_name'] == image_name:
                return jsonify(row)
    return jsonify({})

@app.route('/images/<filename>')
def get_image(filename):
    return send_from_directory(IMAGE_DIR, filename)

@app.route('/run_script')
def run_script():
    import subprocess
    result = subprocess.run(["/home/edhitha/gdino/autogeo/ai_run.sh"], capture_output=True, text=True)
    return result.stdout or result.stderr

# Pre-load CSV
csv_data = {}

def load_csv():
    global csv_data
    with open(CSV_PATH, newline='') as f:
        reader = csv.DictReader(f)
        for row in reader:
            crop_name = row['crop_name']
            csv_data[crop_name] = {
                "crop_name": crop_name,
                "lat": row.get("lat", ""),
                "lon": row.get("lon", ""),
                "class": row.get("class", ""),
                "pxl_center": row.get("pxl_center_x_y", ""),
                "crop_path": row.get("crop_path", "")
            }


@app.route('/get_info/<image_name>')
def get_info(image_name):
    info = csv_data.get(image_name, {})
    return jsonify(info)

#@app.route('/map')
#def map():
#   return render_template("combined_output_with_class.html")

@app.route('/map')
def map():
    return send_from_directory(AI_BASE, "combined_output_with_class.html")


if __name__ == '__main__':
    load_csv()
    app.run(debug=True, port=5000)

